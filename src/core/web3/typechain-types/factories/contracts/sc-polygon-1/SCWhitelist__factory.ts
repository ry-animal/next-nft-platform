/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  SCWhitelist,
  SCWhitelistInterface,
} from "../../../contracts/sc-polygon-1/SCWhitelist";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "scnftContractAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "userAccountAddress",
        type: "address",
      },
    ],
    name: "addKYCUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "scnftContractAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "userAccountAddress",
        type: "address",
      },
    ],
    name: "addPresaleUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "scnftContractAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "userAccountAddress",
        type: "address",
      },
    ],
    name: "isUserKYCWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "scnftContractAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "userAccountAddress",
        type: "address",
      },
    ],
    name: "isUserPresaleWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "scnftContractAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "userAccountAddress",
        type: "address",
      },
    ],
    name: "removeKYCUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "scnftContractAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "userAccountAddress",
        type: "address",
      },
    ],
    name: "removePresaleUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6108908061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063822989cf11610066578063822989cf146100f05780638adfb0a5146101035780638da5cb5b146101165780639437b6fb14610131578063f2fde38b1461014457600080fd5b80631435534414610098578063257c2d33146100c0578063592ef491146100d5578063715018a6146100e8575b600080fd5b6100ab6100a6366004610727565b610157565b60405190151581526020015b60405180910390f35b6100d36100ce366004610727565b6101bb565b005b6100ab6100e3366004610727565b610230565b6100d3610277565b6100d36100fe366004610727565b61028b565b6100d3610111366004610727565b6102f5565b6000546040516001600160a01b0390911681526020016100b7565b6100d361013f366004610727565b610344565b6100d361015236600461075a565b610392565b60008061016384610410565b61016c84610410565b60405160200161017d9291906107ac565b604051602081830303815290604052905060028160405161019e91906107c9565b9081526040519081900360200190205460ff169150505b92915050565b6101c3610448565b60006101ce83610410565b6101d783610410565b6040516020016101e89291906107ac565b6040516020818303038152906040529050600160028260405161020b91906107c9565b908152604051908190036020019020805491151560ff19909216919091179055505050565b60008061023c84610410565b61024584610410565b6040516020016102569291906107ac565b604051602081830303815290604052905060018160405161019e91906107c9565b61027f610448565b61028960006104a2565b565b610293610448565b600061029e83610410565b6102a783610410565b6040516020016102b89291906107ac565b60405160208183030381529060405290506001816040516102d991906107c9565b908152604051908190036020019020805460ff19169055505050565b6102fd610448565b600061030883610410565b61031183610410565b6040516020016103229291906107ac565b60405160208183030381529060405290506001808260405161020b91906107c9565b61034c610448565b600061035783610410565b61036083610410565b6040516020016103719291906107ac565b60405160208183030381529060405290506002816040516102d991906107c9565b61039a610448565b6001600160a01b0381166104045760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61040d816104a2565b50565b604051606082811b6bffffffffffffffffffffffff19166020830152906101b5906034016040516020818303038152906040526104f2565b6000546001600160a01b031633146102895760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103fb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60408051808201909152601081526f181899199a1a9b1b9c1cb0b131b232b360811b602082015281516060919060009061052d9060026107eb565b610538906002610802565b67ffffffffffffffff81111561055057610550610815565b6040519080825280601f01601f19166020018201604052801561057a576020820181803683370190505b509050600360fc1b816000815181106105955761059561082b565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106105c4576105c461082b565b60200101906001600160f81b031916908160001a90535060005b8451811015610703578260048683815181106105fc576105fc61082b565b016020015182516001600160f81b031990911690911c60f81c9081106106245761062461082b565b01602001516001600160f81b0319168261063f8360026107eb565b61064a906002610802565b8151811061065a5761065a61082b565b60200101906001600160f81b031916908160001a905350828582815181106106845761068461082b565b602091010151815160f89190911c600f169081106106a4576106a461082b565b01602001516001600160f81b031916826106bf8360026107eb565b6106ca906003610802565b815181106106da576106da61082b565b60200101906001600160f81b031916908160001a905350806106fb81610841565b9150506105de565b509392505050565b80356001600160a01b038116811461072257600080fd5b919050565b6000806040838503121561073a57600080fd5b6107438361070b565b91506107516020840161070b565b90509250929050565b60006020828403121561076c57600080fd5b6107758261070b565b9392505050565b6000815160005b8181101561079d5760208185018101518683015201610783565b50600093019283525090919050565b60006107c16107bb838661077c565b8461077c565b949350505050565b6000610775828461077c565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176101b5576101b56107d5565b808201808211156101b5576101b56107d5565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060018201610853576108536107d5565b506001019056fea2646970667358221220e541f67f1469567ce0ba99e8967fd5784fbfb9621eaef4dcd6774ea3da60583164736f6c63430008110033";

type SCWhitelistConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SCWhitelistConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SCWhitelist__factory extends ContractFactory {
  constructor(...args: SCWhitelistConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SCWhitelist> {
    return super.deploy(overrides || {}) as Promise<SCWhitelist>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SCWhitelist {
    return super.attach(address) as SCWhitelist;
  }
  override connect(signer: Signer): SCWhitelist__factory {
    return super.connect(signer) as SCWhitelist__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SCWhitelistInterface {
    return new utils.Interface(_abi) as SCWhitelistInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SCWhitelist {
    return new Contract(address, _abi, signerOrProvider) as SCWhitelist;
  }
}
