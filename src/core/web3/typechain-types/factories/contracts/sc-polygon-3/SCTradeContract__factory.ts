/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  SCTradeContract,
  SCTradeContractInterface,
} from "../../../contracts/sc-polygon-3/SCTradeContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_platformFeePercentage",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "NFTListed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "NFTPurchased",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "NFTUnlisted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "_tradableContractAddresses",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "addTradableContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "deleteTradableContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getListing",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isForSale",
            type: "bool",
          },
        ],
        internalType: "struct SCTradeContract.Listing",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPlatformFeePercentage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTradableContracts",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "isListed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isTradingEnabled",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "listNFT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "platformFeePercentage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "purchaseNFT",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newPlatformFeePercentage",
        type: "uint256",
      },
    ],
    name: "setPlatformFeePercentage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "enableTrade",
        type: "bool",
      },
    ],
    name: "setTradingEnabled",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "tradableContracts",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "unlistNFT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526005805460ff1916600117905534801561001d57600080fd5b5060405161150338038061150383398101604081905261003c9161010c565b610045336100bc565b6001805560648111156100b45760405162461bcd60e51b815260206004820152602d60248201527f506c6174666f726d206665652070657263656e746167652073686f756c64206e60448201526c06f74206578636565642031303609c1b606482015260840160405180910390fd5b600655610125565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561011e57600080fd5b5051919050565b6113cf806101346000396000f3fe6080604052600436106101095760003560e01c806388700d1c11610095578063c194b64211610064578063c194b6421461031f578063c2e5ec041461033f578063cdb3cd251461035f578063cdd78cfc1461037f578063f2fde38b1461039557600080fd5b806388700d1c146102615780638da5cb5b146102ce578063a87e25ac146102ec578063ad05f1b4146102ff57600080fd5b80637a3a27ea116100dc5780637a3a27ea146101ac5780637fc27efd146101cf5780638215f4f4146101ef5780638333903e1461021f578063843c88281461023f57600080fd5b8063064a59d01461010e5780632b8632a71461013d578063715018a61461015f57806374bb815814610174575b600080fd5b34801561011a57600080fd5b506005546101289060ff1681565b60405190151581526020015b60405180910390f35b34801561014957600080fd5b5061015d610158366004611120565b6103b5565b005b34801561016b57600080fd5b5061015d61047c565b34801561018057600080fd5b5061019461018f36600461113d565b610490565b6040516001600160a01b039091168152602001610134565b3480156101b857600080fd5b506101c16104ba565b604051908152602001610134565b3480156101db57600080fd5b5061015d6101ea366004611156565b6104e6565b3480156101fb57600080fd5b5061012861020a366004611120565b60036020526000908152604090205460ff1681565b34801561022b57600080fd5b5061015d61023a36600461113d565b610635565b34801561024b57600080fd5b506102546106a9565b6040516101349190611182565b34801561026d57600080fd5b5061028161027c366004611156565b61070b565b604051610134919081516001600160a01b03908116825260208084015190911690820152604080830151908201526060808301519082015260809182015115159181019190915260a00190565b3480156102da57600080fd5b506000546001600160a01b0316610194565b61015d6102fa366004611156565b610823565b34801561030b57600080fd5b5061015d61031a3660046111cf565b610b2a565b34801561032b57600080fd5b5061015d61033a366004611120565b610d54565b34801561034b57600080fd5b5061015d61035a366004611204565b610ee3565b34801561036b57600080fd5b5061012861037a366004611156565b610efe565b34801561038b57600080fd5b506101c160065481565b3480156103a157600080fd5b5061015d6103b0366004611120565b610fc4565b6103bd61103d565b6001600160a01b0381166103ec5760405162461bcd60e51b81526004016103e390611226565b60405180910390fd5b6001600160a01b03811660009081526003602052604090205460ff1661045857600480546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319166001600160a01b0383161790555b6001600160a01b03166000908152600360205260409020805460ff19166001179055565b61048461103d565b61048e6000611097565b565b600481815481106104a057600080fd5b6000918252602090912001546001600160a01b0316905081565b60055460009060ff166104df5760405162461bcd60e51b81526004016103e390611255565b5060065490565b60055460ff166105085760405162461bcd60e51b81526004016103e390611255565b6001600160a01b03821661052e5760405162461bcd60e51b81526004016103e390611226565b6001600160a01b0382811660009081526002602090815260408083208584529091529020805490911633146105b05760405162461bcd60e51b815260206004820152602260248201527f4f6e6c79207468652073656c6c65722063616e20756e6c69737420746865204e604482015261119560f21b60648201526084016103e3565b6001600160a01b038316600081815260026020818152604080842087855290915280832080546001600160a01b031990811682556001820180549091169055918201839055600382018390556004909101805460ff19169055518492917f8a7922f72dc2a50a632acdde12b7d222aefa2fdb7f3ca1364b419734569d0e8091a3505050565b61063d61103d565b60648111156106a45760405162461bcd60e51b815260206004820152602d60248201527f506c6174666f726d206665652070657263656e746167652073686f756c64206e60448201526c06f74206578636565642031303609c1b60648201526084016103e3565b600655565b6060600480548060200260200160405190810160405280929190818152602001828054801561070157602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116106e3575b5050505050905090565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915260055460ff166107585760405162461bcd60e51b81526004016103e390611255565b6001600160a01b03831661077e5760405162461bcd60e51b81526004016103e390611226565b6001600160a01b03831660009081526003602052604090205460ff166107b65760405162461bcd60e51b81526004016103e39061127f565b506001600160a01b038083166000908152600260208181526040808420868552825292839020835160a0810185528154861681526001820154909516918501919091529081015491830191909152600381015460608301526004015460ff16151560808201525b92915050565b60055460ff166108455760405162461bcd60e51b81526004016103e390611255565b6001600160a01b03821661086b5760405162461bcd60e51b81526004016103e390611226565b6001600160a01b03821660009081526003602052604090205460ff166108a35760405162461bcd60e51b81526004016103e39061127f565b6001600160a01b038216600090815260026020908152604080832084845290915290206004810154349060ff166109125760405162461bcd60e51b81526020600482015260136024820152724e4654206973206e6f7420666f722073616c6560681b60448201526064016103e3565b816003015481101561095d5760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b60448201526064016103e3565b6000610983606461097d60065486600301546110e790919063ffffffff16565b906110f3565b9050600061099e8285600301546110ff90919063ffffffff16565b60018501546002860154604051632142170760e11b815230600482015233602482015260448101919091529192506001600160a01b0316906342842e0e90606401600060405180830381600087803b1580156109f957600080fd5b505af1158015610a0d573d6000803e3d6000fd5b50505050610a236000546001600160a01b031690565b6001600160a01b03166108fc839081150290604051600060405180830381858888f19350505050158015610a5b573d6000803e3d6000fd5b5083546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015610a95573d6000803e3d6000fd5b506001600160a01b03861660008181526002602081815260408084208a8552825280842080546001600160a01b03199081168255600182018054909116905592830184905560038301939093556004909101805460ff1916905590518581528792917fa6d32bfcc7cd31e4d5ee7adeef7edd500cab0e64b4a494de4f832d41fd70f56d910160405180910390a3505050505050565b60055460ff16610b4c5760405162461bcd60e51b81526004016103e390611255565b6001600160a01b038316610b725760405162461bcd60e51b81526004016103e390611226565b6001600160a01b03831660009081526003602052604090205460ff16610baa5760405162461bcd60e51b81526004016103e39061127f565b6040516331a9108f60e11b81526004810183905283906001600160a01b03821690636352211e90602401602060405180830381865afa158015610bf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1591906112d5565b6001600160a01b0316336001600160a01b031614610c755760405162461bcd60e51b815260206004820152601e60248201527f53656e646572206973206e6f742074686520746f6b656e206f776e65722e000060448201526064016103e3565b6040805160a0810182523381526001600160a01b03868116602080840182815284860189815260608601898152600160808801818152600087815260028088528b82208f83529097528a9020985189549089166001600160a01b0319918216178a559451918901805492909816919094161790955551918501919091559151600384015590516004909201805492151560ff199093169290921790915590518491907fbbf44e68296791df5535457da734bf1017c4b233a740af6d7a89b9f1af4ecb4290610d469086815260200190565b60405180910390a350505050565b610d5c61103d565b6001600160a01b038116610d825760405162461bcd60e51b81526004016103e390611226565b6001600160a01b03811660009081526003602052604090205460ff16610dba5760405162461bcd60e51b81526004016103e39061127f565b6001600160a01b0381166000908152600360205260408120805460ff191690555b600454811015610edf57816001600160a01b031660048281548110610e0257610e026112f2565b6000918252602090912001546001600160a01b031603610ecd5760048054610e2c9060019061131e565b81548110610e3c57610e3c6112f2565b600091825260209091200154600480546001600160a01b039092169183908110610e6857610e686112f2565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506004805480610ea757610ea7611331565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b80610ed781611347565b915050610ddb565b5050565b610eeb61103d565b6005805460ff1916911515919091179055565b60006001600160a01b038316610f265760405162461bcd60e51b81526004016103e390611226565b6001600160a01b03831660009081526003602052604090205460ff16610f5e5760405162461bcd60e51b81526004016103e39061127f565b6001600160a01b038316600090815260026020908152604080832085845290915290206004015460ff1615156001148015610fbd57506001600160a01b0383811660009081526002602090815260408083208684529091529020541615155b9392505050565b610fcc61103d565b6001600160a01b0381166110315760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103e3565b61103a81611097565b50565b6000546001600160a01b0316331461048e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610fbd8284611360565b6000610fbd8284611377565b6000610fbd828461131e565b6001600160a01b038116811461103a57600080fd5b60006020828403121561113257600080fd5b8135610fbd8161110b565b60006020828403121561114f57600080fd5b5035919050565b6000806040838503121561116957600080fd5b82356111748161110b565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b818110156111c35783516001600160a01b03168352928401929184019160010161119e565b50909695505050505050565b6000806000606084860312156111e457600080fd5b83356111ef8161110b565b95602085013595506040909401359392505050565b60006020828403121561121657600080fd5b81358015158114610fbd57600080fd5b602080825260159082015274496e76616c696420746f6b656e206164647265737360581b604082015260600190565b60208082526010908201526f151c98591a5b99c8191a5cd8589b195960821b604082015260600190565b60208082526036908201527f436f6e7472616374206973206e6f742077686974656c697374656420666f72206040820152757472616465206f6e207468697320706c6174666f726d60501b606082015260800190565b6000602082840312156112e757600080fd5b8151610fbd8161110b565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561081d5761081d611308565b634e487b7160e01b600052603160045260246000fd5b60006001820161135957611359611308565b5060010190565b808202811582820484141761081d5761081d611308565b60008261139457634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220bdb923752f054f51fe7c2299db3454b80e0cece78dee2bb1d285598cfff3194864736f6c63430008110033";

type SCTradeContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SCTradeContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SCTradeContract__factory extends ContractFactory {
  constructor(...args: SCTradeContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _platformFeePercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SCTradeContract> {
    return super.deploy(
      _platformFeePercentage,
      overrides || {}
    ) as Promise<SCTradeContract>;
  }
  override getDeployTransaction(
    _platformFeePercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_platformFeePercentage, overrides || {});
  }
  override attach(address: string): SCTradeContract {
    return super.attach(address) as SCTradeContract;
  }
  override connect(signer: Signer): SCTradeContract__factory {
    return super.connect(signer) as SCTradeContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SCTradeContractInterface {
    return new utils.Interface(_abi) as SCTradeContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SCTradeContract {
    return new Contract(address, _abi, signerOrProvider) as SCTradeContract;
  }
}
